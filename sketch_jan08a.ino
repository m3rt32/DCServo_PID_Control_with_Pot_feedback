double setPoint=555;
double girisSinyali,cikisSinyali;
double toplamHata,sonHata;
double kp,ki,kd;
int newData;
String konum="";
char girilen_deger;
double threshold=0;
int hesaplamaSuresi=1;//1sn
unsigned long lastTime;//Son Compute zamanı
unsigned long totalTime;
signed long int  darbe=0;
unsigned long last_time;
#define MOTOR_ENABLE 7
#define MOTORA 6
#define MOTORB 5
///LCD
#include<LCD5110_Graph.h>
LCD5110 myGLCD(8,9,10,11,12);     //  LCD pinlerimizi tanıtıyoruz
#include <avr/pgmspace.h>

const uint8_t arduino_logo[] PROGMEM={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0,
0xC0, 0xC0, 0xE0, 0x60, 0x70, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0x7C,
0x7E, 0x7E, 0x7E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
0xFE, 0x7E, 0x7E, 0x7E, 0x7E, 0x7C, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0,
0x70, 0x60, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFE,
0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xE1, 0x01, 0x00, 0x00, 0x00, 0x60, 0x61, 0x7F, 0xFF, 0xFF, 0xFF,
0x7B, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x71, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0x71, 0x7F, 0xFF, 0xFF,
0x7F, 0x63, 0x61, 0x20, 0x00, 0x00, 0x00, 0xE1, 0xE3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC,
0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x70, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0x00, 0x00, 0x0F, 0x7F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFC, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xE0, 0x80,
0x00, 0x00, 0x00, 0x80, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F,
0x3F, 0x3F, 0x7F, 0x7F, 0x7E, 0x7C, 0x7E, 0x7F, 0x7F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7C, 0x7C, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F,
0x1F, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 
extern uint8_t SmallFont[];
int lcd_ledi = 6;
int old_x, old_y, new_x, new_y, x=0; 
float value;
unsigned char flag=0;
////CODE BEGIN
enum Mode{
  None,
  PControl,
  PIControl,
  PDControl,
  PIDControl,
  Manual
};
Mode mode = 0;
int modeSwitch=4;
bool autoControl=false;
void setup() {
  myGLCD.InitLCD();   //LCD ekranı başlatıyoruz
 myGLCD.drawBitmap(0, 0, arduino_logo, 84, 48);    //Logo cizdirelim
 myGLCD.update();
  delay(2000);
  myGLCD.clrScr();
  myGLCD.setFont(SmallFont);  
  myGLCD.print("PID DENEY",CENTER,0);
  myGLCD.print("DUZENEGI",CENTER,10);
  myGLCD.print("SEDAT KARABAY",CENTER,30);
  myGLCD.print("MERT KIRIMGERI",CENTER,40);
  myGLCD.update();
  delay(2000);
  for (int i=0; i<2; i++)  //invert komutu ekranın tersinin alınması için. Yani ekranda siyah olan yerler beyaz, beyaz yerler ise siyah oluyor.
  {
    myGLCD.invert(true);
    delay(500);
    myGLCD.invert(false);
    delay(500);
  }

  
  myGLCD.clrScr(); //Ekran temizlenir
  pid_set(.01,0,0); //0.01 0 30 
 //threshold = (kp + ki +kd) * threshold;
  Serial.begin(9600);
  pinMode(MOTOR_ENABLE,OUTPUT);
  pinMode(MOTORA,OUTPUT);
  pinMode(MOTORB,OUTPUT);
  pinMode(A0,INPUT);
  pinMode(A1,INPUT);
  pinMode(A2,INPUT);
  pinMode(A3,INPUT);
  pinMode(modeSwitch,INPUT);
  last_time = millis();
  
}

void loop() {
  if(digitalRead(modeSwitch)==HIGH){
    delay(100);
    if(mode==0)
     {
      autoControl=true;
      myGLCD.print("OTOMATIK MOD",CENTER,0);
      myGLCD.print("KONTROL YOK",CENTER,10);
     }else if(mode==1){
      myGLCD.print("P KONTROL",CENTER,0);
     }else if(mode==2){
      myGLCD.print("PI KONTROL",CENTER,0);
     }else if(mode==3){
      myGLCD.print("PD KONTROL",CENTER,0);
     }else if(mode==4){
      myGLCD.print("PID KONTROL",CENTER,0);
     }else if(mode==5){
      autoControl=false;
      myGLCD.print("MANUEL MOD",CENTER,0);
      myGLCD.update();
      delay(1000);
      mode=0;
      return;
     }
     mode=mode+1;
     myGLCD.update();
     delay(1000);
     return;
  }
 if(Serial.available()) 
  {
    girilen_deger=Serial.read(); //char char okur
    if(girilen_deger=='s')
    {
      setPoint=konum.toInt();
      konum="";
    }
    else
    {
       konum=konum+String(girilen_deger);
     }
  }
girisSinyali = analogRead(A0);
double error = Pid_Hesapla();
 double fark = setPoint-girisSinyali;
 double check = analogRead(A0);
 Serial.println(check);
if(millis()-last_time>5){ //print the signal in every 5ms

}

if(abs(error)<0.5){
  toplamHata=0;
  sonHata=0;
  digitalWrite(MOTOR_ENABLE,LOW);
  digitalWrite(MOTORA,LOW);
  digitalWrite(MOTORB,LOW);
}else if(error>=threshold){
 // Serial.print('H');
  //value is lower than target turn the motor
  digitalWrite(MOTOR_ENABLE,HIGH);
  digitalWrite(MOTORA,LOW);
  digitalWrite(MOTORB,HIGH);
}
else if(error<threshold){
  //Serial.print('m');
  digitalWrite(MOTOR_ENABLE,HIGH);
  digitalWrite(MOTORB,LOW);
  digitalWrite(MOTORA,HIGH);
}
//pid oku
double pVal;
double iVal;
double dVal;
if(!autoControl){
  pVal = analogRead(A1);
  iVal = analogRead(A2);
  dVal = analogRead(A3);
  dVal = map(dVal,0,1023,0,60);
  if(iVal<500 && iVal>200){
    iVal = 0;
  }else if(iVal>=500){
    iVal=100;
  }else{
    iVal =0.000001;
  }
  pid_set(pVal/20000,iVal,dVal);
}else{
  switch(mode){
    case 1:
      pVal=0;
      iVal=0;
      dVal=0;
      break;
    case 2:
      pVal=0.1;
      iVal=0;
      dVal=0;
      break;
     case 3:
      pVal=0.1;
      iVal=0.000001;
      dVal=0;
      break;
      case 4:
      pVal=0.01;
      iVal=0;
      dVal=5;
      break;
      case 5:
      pVal=0.1;
      iVal=0;
      dVal=30;
      break;
  }
  pid_set(pVal,iVal,dVal);
}
//Grafik cizdir
int setPointGraph = map(setPoint-threshold,0,1023,46,1);
myGLCD.drawLine(0,setPointGraph,84,setPointGraph);
if (flag == 0)
{
new_x = 6;
old_x = new_x;
new_y= map(setPoint+fark-threshold,0,1023,46,1);
old_y = new_y;
flag=1;
}
else
{
new_x++;
new_y= map(setPoint+fark-threshold,0,1023,46,1);
}
myGLCD.drawLine(old_x,old_y,new_x,new_y);
myGLCD.drawRect(0, 0, 83, 47);
myGLCD.update();

old_x = new_x;
old_y = new_y;
if(new_x==83)
{
new_x=6;
myGLCD.clrScr(); // turn off all GLCD pixels
flag=0;
}
}
double Pid_Hesapla(){
  unsigned long simdikiZaman = millis();
  totalTime+=simdikiZaman;
  double zamanfarki = (double)(simdikiZaman-lastTime);
  if(zamanfarki>=hesaplamaSuresi){
    //hatalari hesapla
  double hata = setPoint-girisSinyali;
  toplamHata +=(hata);
  double turevHata = (hata-sonHata);
  //Pid sinyalini hesapla
  cikisSinyali = kp*hata + ki*toplamHata + kd * turevHata;
  //Sonraki adim icin simdiki hata ve zamani kaydet
  sonHata = hata;
  lastTime = simdikiZaman;
  }
  return cikisSinyali;
}
void pid_set(double p,double i,double d){
  double anlikGainler = ((double)hesaplamaSuresi/1000);
  kp = p ;
  kd = d*anlikGainler;
  ki = i/anlikGainler;
}

